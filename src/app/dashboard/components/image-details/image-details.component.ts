import { Component, OnDestroy, OnInit } from '@angular/core';import { Location } from '@angular/common'import { MatDialog } from '@angular/material/dialog';import { ActivatedRoute } from '@angular/router';import { Observable, Subject, switchMap, takeUntil } from 'rxjs';import { AlbumsService } from '~/dashboard/services/albums.service';import {  HandleImageDialogComponent} from '~/shared/components/add-to-gallery-dialog/add-to-gallery-dialog.component';import { SnackBarService } from '~/shared/services/snack-bar.service';import { Image } from '../../models/image.model';import { DashboardService } from '../../services/dashboard.service';@Component({  selector: 'app-image-details',  templateUrl: './image-details.component.html',  styleUrls: ['./image-details.component.scss']})export class ImageDetailsComponent implements OnInit, OnDestroy {  private componentDestroyed$ = new Subject();  public image: Image;  constructor(    private dashboardService: DashboardService,    private activatedRoute: ActivatedRoute,    private location: Location,    private matDialog: MatDialog,    private albumsService: AlbumsService,    private snackBarService: SnackBarService  ) {  }  public ngOnInit() {    this.fetchImage();  }  public ngOnDestroy() {    this.componentDestroyed$.unsubscribe();  }  public goBack() {    this.location.back();  }  public addToAlbum(image: Image) {    const dialogRef = this.matDialog.open(HandleImageDialogComponent, {      width: "30em",      height: "25em",      panelClass: "addImageDialog"    });    dialogRef.afterClosed().subscribe((dialogRes) => {      if (dialogRes) {        this.albumsService.addToAlbumsList(dialogRes, image);        this.snackBarService.showSnackBar(`Image successfully added to album: ${dialogRes.name}`, "OK");      }    })  }  public download(url: string) {    this.dashboardService.downloadImage(url).subscribe((res) => {      this.dashboardService.downloadBlob(res, "valstockq");    });  }  private fetchImage() {    this.activatedRoute.params      .pipe(        takeUntil(this.componentDestroyed$),        switchMap((params) => this.subscribeToSearchImageService(params.id))      )      .subscribe((image: Image) => this.image = image);  }  private subscribeToSearchImageService(id: string): Observable<Image> {    return this.dashboardService.searchImage(id);  }}