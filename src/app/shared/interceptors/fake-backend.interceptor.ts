import { Injectable } from '@angular/core';import { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';import { Observable, of, throwError } from 'rxjs';import { delay, mergeMap } from 'rxjs/operators';// array in local storage for registered userslet user: {id: number, username: string, password: string} = JSON.parse(localStorage.getItem('user')) || {};@Injectable()export class FakeBackendInterceptor implements HttpInterceptor {  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {    const { url, method, headers, body } = request;    return of(null)      .pipe(mergeMap(handleRoute))      .pipe(delay(500));    function handleRoute() {      switch (true) {        case url.endsWith('/user/login') && method === 'POST':          return login();        default:          return next.handle(request);      }    }    function isUserValid(): boolean {      const { username, password } = body;      return (user.username === body.username && user.password === body.password);    }    function login() {      if (!isUserValid()) return httpResponseError('Username or password is incorrect');      return httpResponseSuccess({        id: user.id,        username: user.username,        token: 'not-a-token'      })    }    function httpResponseSuccess(body = null): Observable<HttpResponse<any>> {      return of(new HttpResponse({ status: 200, body }));    }    function httpResponseError(message): Observable<HttpResponse<any>> {      return throwError({ error: { message } });    }  }}export const fakeBackendProvider = {  provide: HTTP_INTERCEPTORS,  useClass: FakeBackendInterceptor,  multi: true};